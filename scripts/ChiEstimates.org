#+TITLE: RAMA: χ estimates
#+AUTHOR: Deepak Cherian
#+DATE: 14 Mar 2017

#+OPTIONS: html-link-use-abs-url:nil html-postamble:auto
#+OPTIONS: html-preamble:t html-scripts:nil html-style:nil
#+OPTIONS: html5-fancy:t tex:t broken-links:mark
#+HTML_DOCTYPE: html5
#+HTML_CONTAINER: div
#+LATEX_CLASS: dcnotebook
#+HTML_HEAD: <link rel="stylesheet" href="notebook.css" type="text/css" />
#+PROPERTY: header-args :eval never-export :tangle yes

* generic :noexport:
#+BEGIN_SRC ipython :session :exports results
  %matplotlib inline
  import numpy as np
  import matplotlib as mpl
  import matplotlib.pyplot as plt
  import datetime as dt
  import bottleneck as bn
  import h5py
  import sys

  if '/home/deepak/python/' not in sys.path:
      sys.path.append('/home/deepak/python')

  import dcpy.plots
  import dcpy.util
  import chipy.chipy as chipy
  import importlib
  dcpy = importlib.reload(dcpy)

  mpl.rcParams['savefig.transparent'] = True
  mpl.rcParams['figure.figsize'] = [6.5, 6.5]
  mpl.rcParams['figure.dpi'] = 180
  mpl.rcParams['axes.facecolor'] = 'None'
  # del c526
  # c526mar = chipy.chipod('../RAMA13/data/', '526', 'first-try')
#+END_SRC

#+RESULTS:
* Map
#+CAPTION: χpod locations for ASIRI/EBOB/MesoBOB
[[file:~/ebob/MixingmapASIRIPiston.png]]

* what χ estimates are independent?

I think it makes most sense to keep the different ∂T/∂z based estimates apart. I can average T1, T2 based estimates that use the same ancillary data.

-----

~T1~, ~T2~ are independent measures of the "same thing."

internal ∂T/∂z and mooring Tz are independent measures of the temperature stratification

for *526*: always mooring velocity, mooring N²
- ~mm1~
- ~mm2~
- ~mi11~
- ~mi22~

for *527*: always pitot velocity, mooring N²
- ~pm1~
- ~pm2~
- ~pi11~
- ~pi22~

Can I choose between mooring and internal dT/dz? They are /independent/ measures of ∂T/∂z
 - But you have to worry about which one is more appropriate especially when salinity is so important.
* Stratification bias

The Batchelor wavenumber appears to be a strong constraint on the fit; and it is unfortunately quite sensitive to relative magnitudes of N² and ∂T/∂z.

Lessons:
1. Use consistent ∂T/∂z and N².
2. /Somehow/, T-S relation seems to work decently well.

-----

#+CAPTION: Averaging the 1s spectra over increasing intervals. χ estimate converges for n ≥ 5. Converged estimate is factor of 2 higher than initial 1s estimate. Using internal dT/dz results in χ that is factor of 3 higher than mooring dT/dz.
[[file:images/chi-fit-averaged-spectra.png]]

It appears that if I use N² and ∂T/∂z at different scales, then that biases the calculation of χ quite significantly.

Using mooring N² and different ∂T/∂z results in biased PDF for χ (see two examples below)
#+ATTR_HTML: :width 80%
[[file:images/chi-same-N2-diff-dTdz-2.png]]
#+ATTR_HTML: :width 80%
[[file:images/chi-same-N2-diff-dTdz.png]]


#+CAPTION: Changing T_z (here halved and doubled) changes k_b which shifts the spectrum. Associated χ values are [5e-9, 1.7e-9, 7e-10] for [T_z/2, T_z, T_z*2].
[[file:images/chi-fit-Tz-sensitivity.png]]

#+CAPTION: Changing N² (here halved and doubled) changes k_b which shifts the spectrum
[[file:images/chi-fit-N2-sensitivity.png]]

#+CAPTION: Ratio of Tz_i/Tz_m seems to be large enough that estimates will be biased.
[[file:images/Tz-i-m-ration.png]]
*** χ fitting

- the inner loop (count) runs a lot on the first iteration; after that it only runs twice at most. This initial run is probably what biases ε

- dff

* RAMA13 (ra-107)
|------------+------------+-----------------+----------------+------+---------|
| Section    | Dir        | Vel             | S              | Tz   | Compass |
|------------+------------+-----------------+----------------+------+---------|
| [[first try]]  | [[file:RAMA13/data/526/proc/first-try][first-try]]  | both            | daily          | both | ?       |
| [[2017-04-07]] | [[file:RAMA13/data/526/proc/2017-04-07][2017-04-07]] | mooring         | 10m (pre-cal?) | off  | off     |
|            | ---------- | changed masking | -------------- |      |         |
| [[2017-04-12]] | [[file:~/rama/RAMA13/data/526/proc/2017-04-12][2017-04-12]] | mooring         | 10m (filt)     | both | off     |
|            | ---------- | N² tanh fit     | -------------- |      |         |
| [[2017-04-20]] |            | mooring         | N² fit         | both | off     |
|------------+------------+-----------------+----------------+------+---------|

Notes on above:
- Unsure what salinity I used for 2017-04-07. The big difference between that and 2017-04-12 is the N² time series. N^2 drift screws up χ estimate

- Very sure that 2017-04-12 used hourly filtered 10min salinity.

** functions
#+BEGIN_SRC ipython :session :exports results
  def smooth(y, box_pts):
      box = np.ones(box_pts)/box_pts
      y_smooth = np.convolve(y, box, mode='same')
      return y_smooth

#+END_SRC

#+RESULTS:
** full mooring

1. Looks like dS/dz is as important as dT/dz in N².
2. For *30m* χpod, using *10m* mooring velocity instead of pitot makes basically no difference.

#+BEGIN_SRC ipython :session :tangle yes :exports results :eval never-export
  import moor.moor as moor
  import importlib

  importlib.reload(moor)
  importlib.reload(chipy)

  ra12 = moor.moor(90, 12, 'RAMA13', '../RAMA13/')
  ra12.AddChipod(526, '2017-04-20.mat', 15, 'mm1')
  ra12.AddChipod(527, '2017-04-20.mat', 30, 'mm')
  ra12.ReadMet('../RAMA13/rama_mooring_data/met12n90e_10m.cdf')
  ra12.ReadCTD('../RamaPrelimProcessed/RAMA13.mat', 'ramaprelim')
#+END_SRC

#+RESULTS:

#+BEGIN_SRC ipython :session :tangle yes :exports results :eval never-export :file images/rama13-summary.png
  importlib.reload(moor)
  importlib.reload(chipy)

  ax = ra12.Plotχpods()

  ra12.χpod[527].PlotEstimate('chi', 'pm', hax=ax[-3], filter_len=86400)
  ax[-3].set_title('')

  ax[-3].set_ylim([1e-10, 1e-6])

  ra12.χpod[527].PlotEstimate('KT', 'pm', hax=ax[-2], filter_len=86400)
  ax[-2].set_title('')

  ax[-1].set_ylim([-200, 200])

  plt.tight_layout(h_pad=-0.6)
  # plt.xlim([dt.datetime(2014, 2, 1), dt.datetime(2014,3,1)])
#+END_SRC

#+CAPTION: Daily averages of τ, N², J_q; daily running median of χ, K_T. min N² = 3e-6. Green is χ calculated with pitot velocity.
#+RESULTS:
[[file:images/rama13-summary.png]]


[[file:images/rama13-T-S-ρ.png]]


[[file:images/rama13-dens-diff-10m-dy.png]]
** χ-pod 526
*** Choosing Tz

#+BEGIN_SRC ipython :session :tangle yes :exports results :eval never-export :file images/526-chi-change-Tz.png

  import dcpy.plots
  importlib.reload(dcpy.plots)

  pod = ra12.χpod[526]

  χ1 = pod.chi['mm1']['chi'][0]
  χ2 = pod.chi['mm2']['chi'][0]

  Tzm = pod.chi['mm1']['dTdz'][0]
  Tzi1 = pod.chi['mi11']['dTdz'][0]
  Tzi2 = pod.chi['mi22']['dTdz'][0]

  Ktm1 = 0.5 * χ1 / (Tzm**2)
  Ktm2 = 0.5 * χ2 / (Tzm**2)

  Kti1 = 0.5 * χ1 / (Tzi1**2)
  Kti2 = 0.5 * χ2 / (Tzi2**2)

  min_dTdz = 1e-3
  mask1 = abs(Tzi1) > min_dTdz;
  mask2 = abs(Tzi2) > min_dTdz;

  ax1 = plt.subplot(211)
  dcpy.plots.hist(Ktm1[mask1], log=True, label='m1')
  dcpy.plots.hist(Kti1[mask1], log=True, label='i1')
  plt.legend()

  plt.subplot(212, sharex=ax1)
  dcpy.plots.hist(Ktm2[mask2], log=True, label='m2')
  dcpy.plots.hist(Kti2[mask2], log=True, label='i2')
  plt.legend()
#+END_SRC
#+CAPTION: Use χ calculated with mooring N². Calculate K_T with different dT/dz
#+RESULTS:
[[file:images/526-chi-change-Tz.png]]

*** 2017-04-20

[[file:images/N2-fit.png]]

This estimate uses the tanh fit to determine N².
#+CAPTION: Tuned tanh fit used to determine N² compared against simple difference (~diff~)
[[file:images/N2-fit-compare.png]]

*K_T:* ~mm1~, ~mm2~ agree well; Similarly ~mi11~ and ~mi22~ agree well.

+But there's a bias when comparing ~mm1~ with ~mi11~.+
- Bias is "fixed" by using T-S relation from a mooring CTD sensor along with Tz_i somehow. See below.

- Tz_i is calculated over 10 minutes

- +I wonder if I should really fit salinity gradient instead of the backwards method I'm using currently.+

Read data:
#+BEGIN_SRC ipython :session :tangle yes :exports both :eval never-export

import chipy.chipy as chipy
import importlib
chipy = importlib.reload(chipy)

apr20 = chipy.chipod('../RAMA13/data/', '526', '2017-04-20.mat')
apr20.LoadChiEstimates()
apr20.LoadSallyChiEstimate('../sally/chi_analysis_bkgrnd_Feb5/deglitched/mean_chi_526.mat', 'sally')

apr20.CalcKT()
#+END_SRC

#+RESULTS:

**** ~mm~ vs. ~mi~

Sources of bias are:
1. N² < 0 frequently when calculating N² from T-S relation and ∂T/∂z_i , so masking can be very different. For e.g., ~min_N² = 1e-7~ masks 15% of points for ~mm~ vs. ~30%~ of points for ~mi~
2. Tz_i < Tz_m most of the time, so K_T is biased higher.

#+BEGIN_SRC ipython :session :file images/temp/py121246SIh.png
apr20.CompareEstimates('chi', 'mm', 'mi', filter_len=86400)
#+END_SRC
#+CAPTION: mm vs. mi
#+RESULTS:
[[file:images/temp/py121246SIh.png]]

#+BEGIN_SRC ipython :session :tangle yes :exports results :eval never-export :file images/temp/py12672yD.png

apr20.CompareEstimates('KT', 'mm', 'mi', filter_len=24*6)
plt.subplot(2, 2, (1, 2))
plt.grid(which='both')
plt.show()
#+END_SRC
#+RESULTS:
[[file:images/temp/py12672yD.png]]
**** Compare with sally's estimate - looks fine.
#+BEGIN_SRC ipython :session :tangle yes :exports results :eval never-export :file images/temp/py12676SIh.png

apr20.CompareEstimates('chi', 'mm1', 'sally1', 86400)
plt.show()
#+END_SRC

#+RESULTS:
[[file:images/temp/py12676SIh.png]]

#+BEGIN_SRC ipython :session :tangle yes :exports results :eval never-export :file images/temp/py12676AyD.png

apr20.CompareEstimates('KT', 'mm', 'sally1', 86400)
#+END_SRC

#+RESULTS:
[[file:images/temp/py12676AyD.png]]

Let's compare sally's N² with mine.

#+BEGIN_SRC ipython :session :tangle yes :exports results :eval never-export :file images/temp/py12676vJw.png

    plt.plot_date(apr20.time, apr20.chi['mm1']['N2'].squeeze(),
		  '-', linewidth=1, alpha=0.6)
    plt.plot_date(apr20.chi['sally1']['time'].squeeze(),
		  apr20.chi['sally1']['N2'].squeeze(),
                  '-', linewidth=1, alpha=0.6)
    plt.legend('My N² (tanh fit)', 'sally N2')

#+END_SRC
#+CAPTION: Sally's N² has salinity drift.
#+RESULTS:
[[file:images/temp/py12676vJw.png]]
*** 2017-04-12 :noexport:
#+BEGIN_SRC ipython :session :tangle yes :exports results :eval never-export

import chipy.chipy as chipy

apr07 = chipy.chipod('../RAMA13/data/', '526', '2017-04-07.mat')
apr07.LoadChiEstimates()
apr07.CalcKT()

apr12 = chipy.chipod('../RAMA13/data/', '526', '2017-04-12.mat')
apr12.LoadChiEstimates()
apr12.CalcKT()
#+END_SRC

#+RESULTS:

#+BEGIN_SRC ipython :session :tangle yes :exports results :eval never-export :file images/chi-mm1-apr07-apr12.png

  window=None

  plt.subplot(2, 1, 1)
  apr07.PlotEstimate('chi', 'mm1', filter_len=window);
  apr12.PlotEstimate('chi', 'mm1', filter_len=window);

  plt.subplot(2, 1, 2)
  lv1 = np.log10(apr07.chi['mm1']['chi'])
  lv2 = np.log10(apr12.chi['mm1']['chi'])

  plt.hist(lv1[np.isfinite(lv1)], bins=40, normed=True, alpha=0.5)
  plt.hist(lv2[np.isfinite(lv2)], bins=40, normed=True, alpha=0.5)
  plt.legend(('apr07', 'apr12'))
  plt.show()

#+END_SRC
#+CAPTION: These χ's are an order of magnitude higher than [[2017-04-07]] because of drift in N²
#+RESULTS:
[[file:images/chi-mm1-apr07-apr12.png]]

Using mooring dT/dz to mask χ masks out 2.7% of estimates
Using internal dT/dz to mask χ masks out 7% of estimates
Using speed < 5cm/s masks out 0.35% estimates

*masking does not change much at all*

The difference is N² but why is χ higher for higher N^2?
\[ k_b ∝ ε_χ ∝ N^2 \]


#+BEGIN_SRC ipython :session :tangle yes :exports results :eval never-export :file images/temp/py12676_n2.png

  plt.plot_date(apr07.chi['mm1']['time'], apr07.chi['mm1']['N2'],
		'-', linewidth=1)
  plt.plot_date(apr12.chi['mm1']['time'], apr12.chi['mm1']['N2'],
		'-', linewidth=1)
  plt.ylabel('N²')
  plt.legend('Apr 07', 'Apr 12')
  plt.show()
#+END_SRC

#+RESULTS:
[[file:images/temp/py12676_n2.png]]

#+CAPTION: For Apr07 estimate, use_TS_slope = 1 i.e. using Johannes' method of fitting T-S slope. For Apr12, I was doing the simple difference.
[[file:images/526-apr7-apr12-N2.png]]
*** 2017-04-07 :noexport:
 | 10-min *unfiltered*  salinity | mooring dT/dz |

#+BEGIN_SRC ipython :session :exports results
  c526 = chipy.chipod('../RAMA13/data/', '526', '2017-04-07')
  c526.LoadChiEstimates()
  c526.LoadSallyChiEstimate('../sally/chi_analysis_bkgrnd_Feb5/deglitched/mean_chi_526.mat', 'sally')

  c526.CalcKT()

#+END_SRC

#+RESULTS:
**** test filtering
#+BEGIN_SRC ipython :session  :exports results :file images/temp/py172156XN.png

  w, h = mpl.figure.figaspect(1/1.618)
  plt.figure(figsize=(w,h))
  c526.PlotEstimate('KT', 'mm1')
  c526.PlotEstimate('KT', 'mm1', filter_len=24*60+1)
#+END_SRC

#+RESULTS:
[[file:images/temp/py172156XN.png]]

**** scatter χ vs. velocity

#+BEGIN_SRC ipython :session :tangle yes :exports results :eval never-export :file images/chi-velocity-526.png


#+END_SRC
**** ~mm1~ vs. sally

Seems to agree fine. My estimates tend to be noisier; this is probably because of salinity spiking --- this estimate uses unfiltered 10-min salinity.
#+BEGIN_SRC ipython :session :tangle yes :exports results  :file images/chi-526-prelimsal-mm1-sally.png
  w, h = mpl.figure.figaspect(1/1.618)
  plt.figure(figsize=(w,h))
  c526.PlotEstimate('KT', 'mm1', filter_len=24*60+1)
  c526.PlotEstimate('KT', 'sally', filter_len=24*60+1)

#+END_SRC

#+RESULTS:
[[file:images/chi-526-prelimsal-mm1-sally.png]]
**** ~mm1~ vs. ~mm2~
#+BEGIN_SRC ipython :session :tangle yes :exports results  :file images/chi-526-prelimsal-mm1-mm2.png
  c526.CompareEstimates('chi', 'mm1', 'mm2', filter_len=24*60+1)
#+END_SRC

#+RESULTS:
[[file:images/chi-526-prelimsal-mm1-mm2.png]]

**** Sally T1 vs. T2
#+BEGIN_SRC ipython :session :tangle yes :exports results  :file images/chi-526-sally-mm1-mm2.png
c526.CompareEstimates('chi', 'sally1', 'sally2', filter_len=5*24*6+1)
#+END_SRC

#+RESULTS:
[[file:images/chi-526-sally-mm1-mm2.png]]

**** Distributions

#+BEGIN_SRC ipython :session :tangle yes :exports results :eval never-export :file images/temp/py12676O0V.png

chi = c526.chi['mm1']['chi'][:].squeeze()


#+END_SRC
*** first try :noexport:
**** ~mm1~ and ~mi11~ agree really well.
#+BEGIN_SRC ipython :session   :exports results :file images/RAMA13-chi-compare-526-mm1-mi11.png
  c526.CompareEstimates('chi', 'mm1', 'mi11')
#+END_SRC

#+RESULTS:
[[file:images/RAMA13-chi-compare-526-mm1-mi11.png]]

#+BEGIN_SRC ipython :session :exports results :file images/RAMA13-KT-compare-mm1-mi11.png
c526.CompareEstimates('KT', 'mm1', 'mi11')
#+END_SRC

#+RESULTS:
[[file:images/RAMA13-KT-compare-mm1-mi11.png]]

**** ~mi11~ and ~mi22~ disagree quite a lot!
#+BEGIN_SRC ipython :session   :exports results :file images/RAMA13-chi-compare-526-mi11-mi22.png

c526.CompareEstimates('chi', 'mi11', 'mi22')

#+END_SRC

#+RESULTS:
[[file:images/RAMA13-chi-compare-526-mi11-mi22.png]]
#+BEGIN_SRC ipython :session :exports results :file images/RAMA13-kt-compare-526-mi11-mi22.png

c526.CompareEstimates('KT', 'mi11', 'mi22')

#+END_SRC

#+RESULTS:
[[file:images/RAMA13-kt-compare-526-mi11-mi22.png]]

**** ~mi11~ and ~pi11~ agree well - but pitot voltage drifts!
This is with the 40-day high pass filtered pitot but I forgot to add back the 40-day mean.

#+BEGIN_SRC ipython :session   :exports results :file images/RAMA13-chi-compare-526-mi11-pi11.png

c526.CompareEstimates('chi', 'mi11', 'pi11', filter_len=24*60)

#+END_SRC

#+RESULTS:
[[file:images/RAMA13-chi-compare-526-mi11-pi11.png]]

#+BEGIN_SRC ipython :session :exports results :file images/RAMA13-kt-compare-526-mi11-pi11.png

c526.CompareEstimates('KT', 'mi11', 'pi11', filter_len=24*60)

#+END_SRC

#+RESULTS:
[[file:images/RAMA13-kt-compare-526-mi11-pi11.png]]

**** masking

#+BEGIN_SRC ipython :session :exports results :file images/temp/py172156XN.png

  chi = c526.chi['mi11']
  N2 = chi['N2'][:].squeeze()
  Tz = chi['dTdz'][:].squeeze()
  c = chi['chi'][:].squeeze()

  c[Tz < -0.5] = np.nan
  c[N2 > 1] = np.nan
  plt.plot(c)
  plt.yscale('log')

  import scipy.ndimage as image

  def dcmedianfilter(a):
    return np.nanmedian(a)

  # cfilt = image.generic_filter1d(c, dcmedianfilter, 10)
  cfilt = image.median_filter(c, 5*24*60)
  plt.plot(c, '-')
  plt.plot(cfilt, '-')
  plt.yscale('log')
#+END_SRC

#+RESULTS:
[[file:images/temp/py172156XN.png]]
** χ-pod 527

#+CAPTION: Pitot tube dies in June and temperature dies by October  (;´༎ຶД༎ຶ`)
[[file:~/rama/RAMA13/quick_summary/527/summary1_527.png]]

#+BEGIN_SRC ipython :session :tangle yes :exports results :eval never-export

  import chipy.chipy as chipy
  import importlib
  chipy = importlib.reload(chipy)

  c527 = chipy.chipod('../RAMA13/data/', '527', '2017-04-20.mat')
#+END_SRC

#+RESULTS:


#+BEGIN_SRC ipython :session :tangle yes :exports results :eval never-export :file images/temp/py17346D9Q.png

  c527.CompareEstimates('chi', 'mm2', 'pm1')

#+END_SRC

#+RESULTS:
[[file:images/temp/py17346D9Q.png]]

#+BEGIN_SRC ipython :session :tangle yes :exports results :eval never-export :file images/temp/py12676zpc.png

c527.CompareEstimates('chi', 'pm1', 'pm2', filter_len=24*6)
#+END_SRC

#+RESULTS:
[[file:images/temp/py12676zpc.png]]


#+BEGIN_SRC ipython :session :tangle yes :exports results :eval never-export :file images/temp/py12676aIv.png
c527.CompareEstimates('KT', 'pm1', 'pm2', filter_len=24*6)
#+END_SRC

#+RESULTS:
[[file:images/temp/py12676aIv.png]]
* RAMA14 (ra-122)

 [[file:images/rama1314-T-s-ρ.png]]
