#+TITLE: Compare mooring & chipod dT/dz
#+AUTHOR: Deepak Cherian
#+DATE: 02 Feb 2017

* Load data + functions

#+BEGIN_SRC ipython :session :exports both
%matplotlib inline
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
import datetime as dt
import hdf5storage as hs
import seaborn as sns

mpl.rcParams['savefig.transparent'] = True
mpl.rcParams['figure.figsize'] = [6.5, 6.5]
mpl.rcParams['figure.dpi'] = 120
mpl.rcParams['axes.facecolor'] = 'None'

fname = '../RAMA13/new/526/input/dTdz_i.mat'

mat = hs.loadmat('../RAMA13/new/526/input/dTdz_i.mat')
Tz_i = mat['Tz_i'];
Tzi = np.squeeze(Tz_i['Tz12'])
TziTime = np.squeeze(Tz_i['time'])

mat = hs.loadmat('../RAMA13/new/526/input/dTdz_m.mat')
Tz_m = mat['Tz_m'];
Tzm = Tz_m['Tz'][0][0][0]
TzmTime = Tz_m['time'][0][0][0]
Szm = Tz_m['Sz'][0][0][0]
sTS = Tz_m['s_TS'][0][0][0]

Tzi[abs(Tzi)>5] = np.nan
Tzm[abs(Tzm)>5] = np.nan

#+BEGIN_SRC ipython :session :exports both
def find_approx(vec, value):
    ind = np.argmin(vec == value)
    return ind

def line45():
    plt.axis('square')
    plt.xlim(np.array([-1, 1])*np.max(np.abs(plt.xlim())))
    plt.ylim(np.array([-1, 1])*np.max(np.abs(plt.ylim())))
    plt.plot(plt.xlim(), plt.ylim(), color='gray')

def ScatterSameTimeInterval(t1, v1, t2, v2, hax=None, guidelines=True):
    import matplotlib.pyplot as plt
    import numpy as np

    v2interp = np.interp(t1, t2, v2)

    if ~(hax is None):
        hax = plt.gca()

    plt.axes(hax)
    hax.plot(v1, v2interp, '+');

    if guidelines:
        plt.axhline(0, axes=hax, color='gray')
        plt.axvline(0, axes=hax, color='gray')
        line45()
#+END_SRC

#+RESULTS:

* Compare dT/dz between mooring and chipod
#+BEGIN_SRC ipython :session :file /Users/dcherian/rama/scripts/images/mooring-chipod-dTdz.png :exports both
f, (ax1, ax2) = plt.subplots(1,2)
plt.axes(ax1)
ScatterSameTimeInterval(TzmTime, Tzm, TziTime, Tzi)
ax1.set_xlabel('Mooring dT/dz')
ax1.set_ylabel('χ-pod dT/dz')

ax2.hist(Tzm[~np.isnan(Tzm)], bins=100, normed=True, alpha=0.5,
         label='mooring')
ax2.hist(Tzi[~np.isnan(Tzi)], bins=100, normed=True, alpha=0.5,
         label='χ-pod')
ax2.set_ylim([0, 4])
ax2.set_xlim([-0.2, 0.2])
ax2.legend()
ax2.set_xlabel('dT/dz')
ax2.set_ylabel('pdf')

#+END_SRC

#+RESULTS:
[[file:/Users/dcherian/rama/scripts/images/mooring-chipod-dTdz.png]]

Seems like the χpod senses more temperature inversions; seems good.

The mooring sees higher temperature gradients on average but still some negative values. I'm surprised this happens with 10-min data. Salinity stratification is the obvious explanation.

* T-S relation from mooring - historical data

#+BEGIN_SRC ipython :session :file /Users/dcherian/rama/scripts/images/Tz-mooring-historical-RAMA13.png :exports both

from scipy.io import loadmat

mat = loadmat('../processed/rama12n90e.mat', squeeze_me=True, struct_as_record=False)

T1 = mat['T1']
T2 = mat['T2']

# interpolate temperature onto Salinity
# ScatterSameTimeInterval(T1.Stime, T1.S, T1.time, T1.T, guidelines=False)

TzHist = (T1.T - T2.T)/np.abs(T1.z - T2.z)

def dcHist(var, bins=100, **kwargs):
    import numpy as np
    sns.set_style('darkgrid')
    mpl.rcParams['figure.facecolor'] = 'None'
    #plt.hist(var[~np.isnan(var)], bins, **kwargs)
    sns.distplot(var[~np.isnan(var)], bins, norm_hist=True, **kwargs)

bins = np.linspace(-0.1, .3, num=100)
dcHist(TzHist, bins, kde=False, label='all data')
dcHist(Tzm,  bins, kde=False, label='RAMA13 15m')
limy = plt.ylim()

plt.boxplot(TzHist[~np.isnan(TzHist)], vert=False,
            notch=0, positions=[-4], widths=5)
plt.boxplot(Tzm[~np.isnan(Tzm)], vert=False,
            notch=0, positions=[-9], widths=5)


plt.ylim([-15, limy[1]])
plt.xlim([-0.05, 0.1])
plt.yticks(np.arange(0, 120, 20))
plt.legend()
plt.xlabel('dT/dz from mooring CTDs at 10m, 20m')

#+END_SRC

#+RESULTS:
[[file:/Users/dcherian/rama/scripts/images/Tz-mooring-historical-RAMA13.png]]


Looks pretty good, I say!

* dT/dz and dS/dz from historical data
** All times
#+BEGIN_SRC ipython :session :file /Users/dcherian/rama/scripts/images/dTdz-dSdz-RAMA13.png :exports both

SzHist = (T1.S-T2.S)/np.abs(T1.z-T2.z)

# first interpolate 10 minute dT/dz to hourly time stamp like dS/dz
TzHistInterp = np.interp(T1.Stime, T1.time, TzHist)

g = sns.jointplot(TzHistInterp, SzHist,  marker='.')
g.set_axis_labels('dT/dz', 'dS/dz')
ax = g.fig.get_axes()

ax[0].axhline(0, color='gray')
ax[0].axvline(0, color='gray')

#+END_SRC

#+RESULTS:
[[file:/Users/dcherian/rama/scripts/images/dTdz-dSdz-RAMA13.png]]
1. S_z < 0 for the most part which makes sense.
2. S_z has larger magnitude when T_z < 0 which also makes sense.

** Divide into 4 seasons
